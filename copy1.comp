#version 450

layout (local_size_x=16, local_size_y=16, local_size_z=1) in;

#include "vulimgpars.h"


layout (push_constant) uniform Constants {
   VigImgParam src;
   VigImgParam dst;
   uint sleft;
   uint stop;
   uint width;
   uint height;
   uint dleft;
   uint dtop;
};

layout (binding = 0 ) readonly buffer Source {
   uint source[];
};

layout( binding = 1 ) buffer Dest {
   uint dest[];
};
   
void edgePixel( uint x, uint y ) {
   int sm = int( sleft ) % 32;
   int rest = int(sm+width) - int( x*32 );
   if ( 32 <= rest ) return;
   int left = 0;
   if ( 0 == x ) {
      left = int( dleft ) % 32;
      rest -= left;
   }
   uint si = (y+stop)*src.stride + sleft/32 + x;
   uint v;
   if ( left+rest <= 32 ) {
      v = bitfieldExtract( source[si], left, rest );
   } else {
      int a = 32-left;
      v = bitfieldExtract( source[si], left, a )
         | bitfieldExtract( source[si+1], 0, rest-a ) << a;
   }
   uint di = (y+dtop)*dst.stride + dleft/32 + x;
   dest[ di ] = bitfieldInsert( dest[di], v, left, rest );
}
   

void midPixel( uint x, uint y ) {
   int sm = int( sleft ) % 32;
   int dm = int( dleft ) % 32;
   uint si = (y+stop)*src.stride + sleft/32 +x;
   uint v;
   if ( sm <= dm ) {
      int a = sm+32-dm;
      int b = 32-a;
      v = bitfieldExtract( source[si-1], b, a )
         | bitfieldExtract( source[si], 0, b ) << a;
   } else { 
      int a = sm - dm;
      int b = 32-a;
      v = bitfieldExtract( source[si], a, b )
         | bitfieldExtract( source[si+1], 0, a ) << b;
   }
   dest[ (y+dtop)*dst.stride + dleft/32 + x ] = v;
}
   
   
void main() {
   uint y = gl_GlobalInvocationID.y;
   if ( height <= y ) return;
   uint x = gl_GlobalInvocationID.x;
   uint xl = (width+31)/32;
   if ( 0 == x || xl <= x )
      edgePixel( x, y );
      else midPixel( x, y );
}
